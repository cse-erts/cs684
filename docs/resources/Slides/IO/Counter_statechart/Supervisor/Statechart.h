/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Statechart state machine.
*/
typedef struct Statechart Statechart;

/*!
* Forward declaration of the data structure for the StatechartIface interface scope.
*/
typedef struct StatechartIface StatechartIface;

/*!
* Forward declaration of the data structure for the StatechartInternal interface scope.
*/
typedef struct StatechartInternal StatechartInternal;

#ifdef __cplusplus
}
#endif

#include "sc_types.h"
#include "sc_rxc.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file
Header of the state machine 'Statechart'.
*/

/*! Define number of states in the state enum */
#define STATECHART_STATE_COUNT 8

/*! Define dimension of the state configuration vector for orthogonal states. */
#define STATECHART_MAX_ORTHOGONAL_STATES 3

/*! Define indices of states in the StateConfVector */
#define SCVI_STATECHART_MAIN_REGION_NOT_COUNTING 0
#define SCVI_STATECHART_MAIN_REGION_COUNTING 0
#define SCVI_STATECHART_MAIN_REGION_COUNTING_S1_C0 0
#define SCVI_STATECHART_MAIN_REGION_COUNTING_S1_C1 0
#define SCVI_STATECHART_MAIN_REGION_COUNTING_S2_B0 1
#define SCVI_STATECHART_MAIN_REGION_COUNTING_S2_B1 1
#define SCVI_STATECHART_MAIN_REGION_COUNTING_S3_A0 2
#define SCVI_STATECHART_MAIN_REGION_COUNTING_S3_A1 2

/*! Enumeration of all states */ 
typedef enum
{
	Statechart_last_state,
	Statechart_main_region_Not_Counting,
	Statechart_main_region_Counting,
	Statechart_main_region_Counting_S1_C0,
	Statechart_main_region_Counting_S1_C1,
	Statechart_main_region_Counting_S2_B0,
	Statechart_main_region_Counting_S2_B1,
	Statechart_main_region_Counting_S3_A0,
	Statechart_main_region_Counting_S3_A1
} StatechartStates;


/*! Type declaration of the data structure for the StatechartIface interface scope. */
struct StatechartIface
{
	sc_boolean tick_raised;
	sc_boolean init_raised;
	sc_observable end;
	sc_boolean Aout;
	sc_boolean Bout;
	sc_boolean Cout;
};



/*! Type declaration of the data structure for the StatechartInternal interface scope. */
struct StatechartInternal
{
	sc_boolean lt1_raised;
	sc_boolean lt2_raised;
	sc_boolean local_end_raised;
};





typedef struct StatechartIfaceEvBuf StatechartIfaceEvBuf;
struct StatechartIfaceEvBuf {
	sc_boolean tick_raised;
	sc_boolean init_raised;
};

typedef struct StatechartInternalEvBuf StatechartInternalEvBuf;
struct StatechartInternalEvBuf {
	sc_boolean lt1_raised;
	sc_boolean lt2_raised;
	sc_boolean local_end_raised;
};

typedef struct StatechartEvBuf StatechartEvBuf;
struct StatechartEvBuf {
	StatechartIfaceEvBuf iface;
	StatechartInternalEvBuf internal;
};


/*! 
 * Type declaration of the data structure for the Statechart state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Statechart
{
	StatechartStates stateConfVector[STATECHART_MAX_ORTHOGONAL_STATES];
	StatechartIface iface;
	StatechartInternal internal;
	StatechartEvBuf current;
	sc_boolean isExecuting;
	sc_integer stateConfVectorPosition;
};



/*! Initializes the Statechart state machine data structures. Must be called before first usage.*/
extern void statechart_init(Statechart* handle);


/*! Performs a 'run to completion' step. */
extern void statechart_run_cycle(Statechart* handle);

/*! Activates the state machine. */
extern void statechart_enter(Statechart* handle);

/*! Deactivates the state machine. */
extern void statechart_exit(Statechart* handle);




/*! Raises the in event 'tick' that is defined in the default interface scope. */ 
extern void statechart_raise_tick(Statechart* handle);
/*! Raises the in event 'init' that is defined in the default interface scope. */ 
extern void statechart_raise_init(Statechart* handle);
/*! Returns the observable for the out event 'end' that is defined in the default interface scope. */ 
extern sc_observable* statechart_get_end(Statechart* handle);

/*! Gets the value of the variable 'Aout' that is defined in the default interface scope. */ 
extern sc_boolean statechart_get_aout(const Statechart* handle);
/*! Sets the value of the variable 'Aout' that is defined in the default interface scope. */ 
extern void statechart_set_aout(Statechart* handle, sc_boolean value);
/*! Gets the value of the variable 'Bout' that is defined in the default interface scope. */ 
extern sc_boolean statechart_get_bout(const Statechart* handle);
/*! Sets the value of the variable 'Bout' that is defined in the default interface scope. */ 
extern void statechart_set_bout(Statechart* handle, sc_boolean value);
/*! Gets the value of the variable 'Cout' that is defined in the default interface scope. */ 
extern sc_boolean statechart_get_cout(const Statechart* handle);
/*! Sets the value of the variable 'Cout' that is defined in the default interface scope. */ 
extern void statechart_set_cout(Statechart* handle, sc_boolean value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean statechart_is_active(const Statechart* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean statechart_is_final(const Statechart* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean statechart_is_state_active(const Statechart* handle, StatechartStates state);


#ifdef __cplusplus
}
#endif 

#endif /* STATECHART_H_ */
